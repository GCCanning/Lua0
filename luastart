-- CC: Tweaks Advanced Computer Interface
-- Features: Login Screen, Objectives List (Editable), Redstone Control, Power Monitoring, Background Music

local username = "TheNameOfTheVoid"
local objectives = {"Build storage room", "Expand farm", "Automate smelter"}
local redstoneControls = {"Door", "Lights", "Alarm"}
local sides = {"left", "right", "back"} -- Redstone output sides
local monitor = peripheral.find("monitor") -- Auto-detect the first monitor
local powerPeripheral = peripheral.find("energy_storage") -- Adjust based on mod used
local speaker = peripheral.find("speaker") -- Auto-detect speaker for background music
local scrollIndex = 1

-- Ensure output is redirected to the monitor
if monitor then
    term.redirect(monitor)
    monitor.setTextScale(0.5)
    monitor.setBackgroundColor(colors.black)
    monitor.clear()
else
    print("Monitor not found! Displaying on terminal instead.")
end

-- Utility functions
function clearScreen()
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.white)
    term.clear()
    term.setCursorPos(1,1)
end

function drawCenteredText(text, y, color)
    local w, h = monitor.getSize()
    monitor.setTextColor(color)
    monitor.setCursorPos(math.floor((w - #text) / 2), y)
    monitor.write(text)
end

function drawRunicBorder()
    local w, h = monitor.getSize()
    local rune = "✦"
    for x = 1, w do
        monitor.setCursorPos(x, 1)
        monitor.write(rune)
        monitor.setCursorPos(x, h)
        monitor.write(rune)
    end
    for y = 1, h do
        monitor.setCursorPos(1, y)
        monitor.write(rune)
        monitor.setCursorPos(w, y)
        monitor.write(rune)
    end
end

function animateBlackHole()
    for i = 1, 5 do
        clearScreen()
        drawRunicBorder()
        drawCenteredText("O", 6, colors.gray)
        sleep(0.1)
        clearScreen()
        drawRunicBorder()
        drawCenteredText("0", 6, colors.purple)
        sleep(0.1)
    end
end

-- Play background music
function playMusic()
    if speaker then
        sleep(0.5)
        speaker.playSound("minecraft:music_disc.otherside", 3)
        sleep(1)
        speaker.playSound("minecraft:ambient.cave", 1)
    else
        print("No speaker detected!")
    end
end

-- Touch event handler
function waitForTouch()
    while true do
        local event, side, x, y = os.pullEvent("monitor_touch")
        return x, math.floor(y)
    end
end

-- Login Screen
function loginScreen()
    playMusic()
    animateBlackHole()
    clearScreen()
    drawRunicBorder()
    drawCenteredText("Welcome Home " .. username, 3, colors.purple)
    sleep(2)
    mainMenu()
end

-- Objectives Screen
function objectivesScreen()
    clearScreen()
    drawRunicBorder()
    drawCenteredText("== Current Objectives ==", 3, colors.purple)
    
    local h = monitor.getSize()
    local maxDisplay = h - 8 -- Allow room for the border and back button
    for i = scrollIndex, math.min(scrollIndex + maxDisplay, #objectives) do
        drawCenteredText(i .. ") " .. objectives[i], 5 + (i - scrollIndex) * 2, colors.white)
    end
    
    drawCenteredText("⬆ Scroll Up ⬆", h - 6, colors.lightGray)
    drawCenteredText("⬇ Scroll Down ⬇", h - 4, colors.lightGray)
    drawCenteredText("Click to edit or add", h - 2, colors.purple)
    drawCenteredText("⬅ Back", h, colors.red)
    
    local x, y = waitForTouch()
    if y >= 5 and y < h - 6 then
        local index = scrollIndex + math.floor((y - 5) / 2)
        if objectives[index] then editObjective(index) end
    elseif y == h - 6 then
        if scrollIndex > 1 then scrollIndex = scrollIndex - 1 end
        objectivesScreen()
    elseif y == h - 4 then
        if scrollIndex + maxDisplay < #objectives then scrollIndex = scrollIndex + 1 end
        objectivesScreen()
    elseif y == h - 2 then
        addObjective()
    else
        mainMenu()
    end
end

function editObjective(index)
    term.setCursorPos(1, monitor.getSize() + 2)
    term.clearLine()
    term.write("Edit Objective: " .. objectives[index] .. " > ")
    local input = read()
    if input:lower() == "delete" then
        table.remove(objectives, index)
    elseif input ~= "" then
        objectives[index] = input
    end
    objectivesScreen()
end

function addObjective()
    term.setCursorPos(1, monitor.getSize() + 2)
    term.clearLine()
    term.write("New Objective > ")
    local input = read()
    if input ~= "" then
        table.insert(objectives, input)
    end
    objectivesScreen()
end

-- Main Menu
function mainMenu()
    clearScreen()
    drawRunicBorder()
    drawCenteredText("== Main Menu ==", 3, colors.purple)
    drawCenteredText("1) Current Objectives", 6, colors.white)
    drawCenteredText("2) Control Panel", 8, colors.white)
    drawCenteredText("3) Power Status", 10, colors.white)
    drawCenteredText("Click an option:", 12, colors.purple)
    
    local x, y = waitForTouch()
    if y >= 5 and y <= 7 then objectivesScreen() 
    elseif y >= 7 and y <= 9 then controlPanel() 
    elseif y >= 9 and y <= 11 then powerStatus() 
    else mainMenu() end
end

-- Start program
loginScreen()
