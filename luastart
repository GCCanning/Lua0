-- CC: Tweaks Advanced Computer Interface
-- Features: Login Screen, Objectives List, Redstone Control, Power Monitoring

local username = "TheNameOfTheVoid"
local objectives = {"Build storage room", "Expand farm", "Automate smelter"}
local redstoneControls = {"Door", "Lights", "Alarm"}
local sides = {"left", "right", "back"} -- Redstone output sides
local monitor = peripheral.wrap("right") -- Adjusted for large display
local powerPeripheral = peripheral.find("energy_storage") -- Adjust based on mod used

-- Utility functions
function clearScreen()
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.white)
    term.clear()
    term.setCursorPos(1,1)
end

function drawCenteredText(text, y, color)
    local w, h = term.getSize()
    term.setTextColor(color)
    term.setCursorPos(math.floor((w - #text) / 2), y)
    term.write(text)
end

function drawRunicBorder()
    local w, h = term.getSize()
    local rune = "âœ¦"
    for x = 1, w do
        term.setCursorPos(x, 1)
        term.write(rune)
        term.setCursorPos(x, h)
        term.write(rune)
    end
    for y = 1, h do
        term.setCursorPos(1, y)
        term.write(rune)
        term.setCursorPos(w, y)
        term.write(rune)
    end
end

function animateBlackHole()
    for i = 1, 5 do
        clearScreen()
        drawRunicBorder()
        drawCenteredText("O", 6, colors.gray)
        sleep(0.1)
        clearScreen()
        drawRunicBorder()
        drawCenteredText("0", 6, colors.purple)
        sleep(0.1)
    end
end

-- Login Screen
function loginScreen()
    animateBlackHole()
    clearScreen()
    drawRunicBorder()
    drawCenteredText("Welcome Home " .. username, 3, colors.purple)
    sleep(2)
    mainMenu()
end

-- Main Menu
function mainMenu()
    clearScreen()
    drawRunicBorder()
    drawCenteredText("== Main Menu ==", 3, colors.purple)
    drawCenteredText("1) Current Objectives", 6, colors.white)
    drawCenteredText("2) Control Panel", 8, colors.white)
    drawCenteredText("3) Power Status", 10, colors.white)
    drawCenteredText("Select an option:", 12, colors.purple)
    local choice = read()
    if choice == "1" then objectivesScreen() 
    elseif choice == "2" then controlPanel() 
    elseif choice == "3" then powerStatus() 
    else mainMenu() end
end

-- Objectives Screen
function objectivesScreen()
    clearScreen()
    drawRunicBorder()
    drawCenteredText("== Current Objectives ==", 3, colors.purple)
    for i, obj in ipairs(objectives) do drawCenteredText(i .. ") " .. obj, 5 + i, colors.white) end
    drawCenteredText("Enter new objective or 'back' to return:", 10, colors.purple)
    local input = read()
    if input ~= "back" then 
        table.insert(objectives, input)
        drawCenteredText("Objective added: " .. input, 12, colors.green)
        sleep(1.5)
    end
    mainMenu()
end

-- Control Panel
function controlPanel()
    clearScreen()
    drawRunicBorder()
    drawCenteredText("== Control Panel ==", 3, colors.purple)
    for i, control in ipairs(redstoneControls) do
        local status = redstone.getOutput(sides[i]) and "ON" or "OFF"
        drawCenteredText(i .. ") " .. control .. " [" .. status .. "]", 5 + i, colors.white)
    end
    drawCenteredText("Select a control or type 'back':", 10, colors.purple)
    local input = read()
    local index = tonumber(input)
    if index and redstoneControls[index] then
        local newState = not redstone.getOutput(sides[index])
        redstone.setOutput(sides[index], newState)
        drawCenteredText(redstoneControls[index] .. " toggled " .. (newState and "ON" or "OFF"), 12, colors.green)
        sleep(1.5)
    end
    mainMenu()
end

-- Power Status
function powerStatus()
    clearScreen()
    drawRunicBorder()
    drawCenteredText("== Power Status ==", 3, colors.purple)
    if powerPeripheral then
        drawCenteredText("Total Power: " .. powerPeripheral.getEnergyStored() .. " RF", 6, colors.green)
    else
        drawCenteredText("Power monitor not found.", 6, colors.red)
    end
    drawCenteredText("Press any key to return.", 10, colors.purple)
    os.pullEvent("key")
    mainMenu()
end

-- Start program
loginScreen()
